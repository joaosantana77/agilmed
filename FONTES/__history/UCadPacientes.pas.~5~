unit UCadPacientes;

interface

uses
  Windows, Messages, SysUtils, Variants, Classes, Graphics, Controls, Forms,
  Dialogs, ufrmCadPadrao, DB, ExtCtrls, DBCtrls, Grids, DBGrids, StdCtrls,
  Buttons, ComCtrls, Mask, SqlExpr;

type
  TF_CadPacientes = class(TfrmCadastro)
    Label1: TLabel;
    DBEdit1: TDBEdit;
    Label2: TLabel;
    Label3: TLabel;
    DBEdit3: TDBEdit;
    Label4: TLabel;
    DBEdit4: TDBEdit;
    Label5: TLabel;
    Label6: TLabel;
    Label7: TLabel;
    DBMReceita: TDBMemo;
    DBMExames: TDBMemo;
    DBMAtestado: TDBMemo;
    dtAtend: TDateTimePicker;
    procedure btnNovoClick(Sender: TObject);
    procedure dtAtendExit(Sender: TObject);
  private
    { Private declarations }
  public
    { Public declarations }
  end;

var
  F_CadPacientes: TF_CadPacientes;

implementation

uses UDM;

{$R *.dfm}

procedure TF_CadPacientes.btnNovoClick(Sender: TObject);
var Qry: TSQLQuery;
     D1 : TDateTime;
begin
  inherited;
  Qry := TSQLQuery.Create(nil);  //cria uma instancia do
  try
     Qry.SQLConnection := DM.CONEXAO;  //o seu componente de conexão com o banco
     Qry.SQL.Text := 'select max(idpaciente) from PACIENTES';
     Qry.Open;
     if not QRY.Fields[0].IsNull then   //se nao estiver vazia a tabela retornará nulo
     begin
        DBEdit1.Text := IntToStr(QRY.Fields[0].AsInteger + 1);
     end;
  finally
     FreeAndNil(QRY);    //libera o objeto da memória
  end;
  //DBEdit2.Text := DatetoStr(now);
  //DBEdit2.SetFocus;
//  dtAtend.Text := DatetoStr(now);
  dtAtend.SetFocus;

end;

procedure TF_CadPacientes.dtAtendExit(Sender: TObject);
begin
  inherited;
  DM.cdsCadPACIDATA_ATEND.AsDateTime := dtAtend.DateTime;
end;

end.
